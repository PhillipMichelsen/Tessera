// spot@private.orders.v3.api.pb

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.2
// source: PrivateOrdersV3Api.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PrivateOrdersV3Api struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ClientId           string  `protobuf:"bytes,2,opt,name=clientId,proto3" json:"clientId,omitempty"`
	Price              string  `protobuf:"bytes,3,opt,name=price,proto3" json:"price,omitempty"`
	Quantity           string  `protobuf:"bytes,4,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Amount             string  `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
	AvgPrice           string  `protobuf:"bytes,6,opt,name=avgPrice,proto3" json:"avgPrice,omitempty"`
	OrderType          int32   `protobuf:"varint,7,opt,name=orderType,proto3" json:"orderType,omitempty"`
	TradeType          int32   `protobuf:"varint,8,opt,name=tradeType,proto3" json:"tradeType,omitempty"`
	IsMaker            bool    `protobuf:"varint,9,opt,name=isMaker,proto3" json:"isMaker,omitempty"`
	RemainAmount       string  `protobuf:"bytes,10,opt,name=remainAmount,proto3" json:"remainAmount,omitempty"`
	RemainQuantity     string  `protobuf:"bytes,11,opt,name=remainQuantity,proto3" json:"remainQuantity,omitempty"`
	LastDealQuantity   *string `protobuf:"bytes,12,opt,name=lastDealQuantity,proto3,oneof" json:"lastDealQuantity,omitempty"`
	CumulativeQuantity string  `protobuf:"bytes,13,opt,name=cumulativeQuantity,proto3" json:"cumulativeQuantity,omitempty"`
	CumulativeAmount   string  `protobuf:"bytes,14,opt,name=cumulativeAmount,proto3" json:"cumulativeAmount,omitempty"`
	Status             int32   `protobuf:"varint,15,opt,name=status,proto3" json:"status,omitempty"`
	CreateTime         int64   `protobuf:"varint,16,opt,name=createTime,proto3" json:"createTime,omitempty"`
	Market             *string `protobuf:"bytes,17,opt,name=market,proto3,oneof" json:"market,omitempty"`
	TriggerType        *int32  `protobuf:"varint,18,opt,name=triggerType,proto3,oneof" json:"triggerType,omitempty"`
	TriggerPrice       *string `protobuf:"bytes,19,opt,name=triggerPrice,proto3,oneof" json:"triggerPrice,omitempty"`
	State              *int32  `protobuf:"varint,20,opt,name=state,proto3,oneof" json:"state,omitempty"`
	OcoId              *string `protobuf:"bytes,21,opt,name=ocoId,proto3,oneof" json:"ocoId,omitempty"`
	RouteFactor        *string `protobuf:"bytes,22,opt,name=routeFactor,proto3,oneof" json:"routeFactor,omitempty"`
	SymbolId           *string `protobuf:"bytes,23,opt,name=symbolId,proto3,oneof" json:"symbolId,omitempty"`
	MarketId           *string `protobuf:"bytes,24,opt,name=marketId,proto3,oneof" json:"marketId,omitempty"`
	MarketCurrencyId   *string `protobuf:"bytes,25,opt,name=marketCurrencyId,proto3,oneof" json:"marketCurrencyId,omitempty"`
	CurrencyId         *string `protobuf:"bytes,26,opt,name=currencyId,proto3,oneof" json:"currencyId,omitempty"`
}

func (x *PrivateOrdersV3Api) Reset() {
	*x = PrivateOrdersV3Api{}
	mi := &file_PrivateOrdersV3Api_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrivateOrdersV3Api) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateOrdersV3Api) ProtoMessage() {}

func (x *PrivateOrdersV3Api) ProtoReflect() protoreflect.Message {
	mi := &file_PrivateOrdersV3Api_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateOrdersV3Api.ProtoReflect.Descriptor instead.
func (*PrivateOrdersV3Api) Descriptor() ([]byte, []int) {
	return file_PrivateOrdersV3Api_proto_rawDescGZIP(), []int{0}
}

func (x *PrivateOrdersV3Api) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PrivateOrdersV3Api) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *PrivateOrdersV3Api) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *PrivateOrdersV3Api) GetQuantity() string {
	if x != nil {
		return x.Quantity
	}
	return ""
}

func (x *PrivateOrdersV3Api) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *PrivateOrdersV3Api) GetAvgPrice() string {
	if x != nil {
		return x.AvgPrice
	}
	return ""
}

func (x *PrivateOrdersV3Api) GetOrderType() int32 {
	if x != nil {
		return x.OrderType
	}
	return 0
}

func (x *PrivateOrdersV3Api) GetTradeType() int32 {
	if x != nil {
		return x.TradeType
	}
	return 0
}

func (x *PrivateOrdersV3Api) GetIsMaker() bool {
	if x != nil {
		return x.IsMaker
	}
	return false
}

func (x *PrivateOrdersV3Api) GetRemainAmount() string {
	if x != nil {
		return x.RemainAmount
	}
	return ""
}

func (x *PrivateOrdersV3Api) GetRemainQuantity() string {
	if x != nil {
		return x.RemainQuantity
	}
	return ""
}

func (x *PrivateOrdersV3Api) GetLastDealQuantity() string {
	if x != nil && x.LastDealQuantity != nil {
		return *x.LastDealQuantity
	}
	return ""
}

func (x *PrivateOrdersV3Api) GetCumulativeQuantity() string {
	if x != nil {
		return x.CumulativeQuantity
	}
	return ""
}

func (x *PrivateOrdersV3Api) GetCumulativeAmount() string {
	if x != nil {
		return x.CumulativeAmount
	}
	return ""
}

func (x *PrivateOrdersV3Api) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *PrivateOrdersV3Api) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *PrivateOrdersV3Api) GetMarket() string {
	if x != nil && x.Market != nil {
		return *x.Market
	}
	return ""
}

func (x *PrivateOrdersV3Api) GetTriggerType() int32 {
	if x != nil && x.TriggerType != nil {
		return *x.TriggerType
	}
	return 0
}

func (x *PrivateOrdersV3Api) GetTriggerPrice() string {
	if x != nil && x.TriggerPrice != nil {
		return *x.TriggerPrice
	}
	return ""
}

func (x *PrivateOrdersV3Api) GetState() int32 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

func (x *PrivateOrdersV3Api) GetOcoId() string {
	if x != nil && x.OcoId != nil {
		return *x.OcoId
	}
	return ""
}

func (x *PrivateOrdersV3Api) GetRouteFactor() string {
	if x != nil && x.RouteFactor != nil {
		return *x.RouteFactor
	}
	return ""
}

func (x *PrivateOrdersV3Api) GetSymbolId() string {
	if x != nil && x.SymbolId != nil {
		return *x.SymbolId
	}
	return ""
}

func (x *PrivateOrdersV3Api) GetMarketId() string {
	if x != nil && x.MarketId != nil {
		return *x.MarketId
	}
	return ""
}

func (x *PrivateOrdersV3Api) GetMarketCurrencyId() string {
	if x != nil && x.MarketCurrencyId != nil {
		return *x.MarketCurrencyId
	}
	return ""
}

func (x *PrivateOrdersV3Api) GetCurrencyId() string {
	if x != nil && x.CurrencyId != nil {
		return *x.CurrencyId
	}
	return ""
}

var File_PrivateOrdersV3Api_proto protoreflect.FileDescriptor

var file_PrivateOrdersV3Api_proto_rawDesc = []byte{
	0x0a, 0x18, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x56,
	0x33, 0x41, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x92, 0x08, 0x0a, 0x12, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x56, 0x33, 0x41, 0x70,
	0x69, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x76, 0x67, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x76, 0x67, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x69, 0x73, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x69, 0x73, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a,
	0x0e, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2f, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x65, 0x61,
	0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x65, 0x61, 0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x0b,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27,
	0x0a, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6f, 0x63, 0x6f, 0x49, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x05, 0x52, 0x05, 0x6f, 0x63, 0x6f, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a,
	0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x06, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x64,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x08, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49,
	0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x09, 0x52, 0x10, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x49, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0a, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x65, 0x61, 0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6f, 0x63, 0x6f, 0x49,
	0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x64, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x42,
	0x3b, 0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x78, 0x63, 0x2e, 0x70, 0x75, 0x73, 0x68, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x42,
	0x17, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x56, 0x33,
	0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x01, 0x50, 0x01, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_PrivateOrdersV3Api_proto_rawDescOnce sync.Once
	file_PrivateOrdersV3Api_proto_rawDescData = file_PrivateOrdersV3Api_proto_rawDesc
)

func file_PrivateOrdersV3Api_proto_rawDescGZIP() []byte {
	file_PrivateOrdersV3Api_proto_rawDescOnce.Do(func() {
		file_PrivateOrdersV3Api_proto_rawDescData = protoimpl.X.CompressGZIP(file_PrivateOrdersV3Api_proto_rawDescData)
	})
	return file_PrivateOrdersV3Api_proto_rawDescData
}

var file_PrivateOrdersV3Api_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_PrivateOrdersV3Api_proto_goTypes = []any{
	(*PrivateOrdersV3Api)(nil), // 0: PrivateOrdersV3Api
}
var file_PrivateOrdersV3Api_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_PrivateOrdersV3Api_proto_init() }
func file_PrivateOrdersV3Api_proto_init() {
	if File_PrivateOrdersV3Api_proto != nil {
		return
	}
	file_PrivateOrdersV3Api_proto_msgTypes[0].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_PrivateOrdersV3Api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_PrivateOrdersV3Api_proto_goTypes,
		DependencyIndexes: file_PrivateOrdersV3Api_proto_depIdxs,
		MessageInfos:      file_PrivateOrdersV3Api_proto_msgTypes,
	}.Build()
	File_PrivateOrdersV3Api_proto = out.File
	file_PrivateOrdersV3Api_proto_rawDesc = nil
	file_PrivateOrdersV3Api_proto_goTypes = nil
	file_PrivateOrdersV3Api_proto_depIdxs = nil
}
